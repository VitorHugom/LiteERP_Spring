version: '3.8'

services:
  # Banco de dados PostgreSQL
  liteerp-db:
    image: postgres:15-alpine
    container_name: liteerp-db
    environment:
      POSTGRES_DB: LiteERP
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lite-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend LiteERP (Spring Boot)
  liteerp-backend:
    image: vitorhugoms/lite-erp-backend:latest
    container_name: liteerp-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://liteerp-db:5432/LiteERP
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      JWT_SECRET: seguranca-top-production-compose
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      liteerp-db:
        condition: service_healthy
    networks:
      - lite-erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend LiteERP (React/Angular/Vue)
  liteerp-frontend:
    image: vitorhugoms/lite-erp-frontend:latest
    container_name: liteerp-frontend
    environment:
      # Configurações do frontend Angular - DESENVOLVIMENTO LOCAL
      # Frontend se comunica com backend via rede Docker interna
      API_URL: http://localhost:8080
    ports:
      - "4200:80"  # Frontend na porta 4200 como você usava antes
    depends_on:
      liteerp-backend:
        condition: service_healthy
    networks:
      - lite-erp-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  lite-erp-network:
    driver: bridge
